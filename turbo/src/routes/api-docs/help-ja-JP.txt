<br/>

# APIドキュメント

## API V0

<br/>

`tttc-turbo` APIはまだ非常に新しく、アルファ段階にあります。
そのため、このAPIは単純に生のデータセットグラフデータ、または生のグラフノードデータへのアクセスを提供します。
<br/>
<br/>
しかし、このデータ形式は*計算タイプ*がバージョン管理されているため、後方互換性を提供します。

<br/>
<br/>

### 認証

<br/>

以下のコード例には`JWT`が含まれています。これは期限切れにならないように設定されています。
[direnv](https://direnv.net/)などを使用して、`TTTC_TURBO_TOKEN`環境変数に保存することをお勧めします。

<br/>
<br/>

### Swagger

<br/>

ブラウザから様々なAPIエンドポイントを試すことができます。
[tttc-turbo Swagger OpenAPIページ](https://tttc-turbo.web.app/api.html)にアクセスしてください。

このページは、クッキーからユーザートークンを読み取ります。そのため、明示的に認証する必要なく、認証されたリクエストを行うことができます。

<br/>
<br/>

### ノードIDと計算タイプ

<br/>

内部的に、`tttc-turbo`はレポート（データセット）をグラフとして保存しています。

<br/>

このグラフ内のノードは一般的に`id`で識別されますが、堅牢なサードパーティスクリプトを構築するには、
ノードの計算タイプをすぐに確認し、ノードのバージョンを処理して、将来のアップグレードを容易にすることをお勧めします。

<br/>

この理由は、計算タイプがバージョン管理されているためです。
例えば、議論の抽出は`argument_extraction_v0`計算タイプで処理され、
クラスター抽出は`cluster_extraction_v0`計算タイプで処理されます。

<br/>

計算タイプのバージョンのデータ形式は安定したままであることが期待できます。
`tttc-turbo`がノードに新しいデータ構造を導入する場合、
新しい計算タイプが導入され、既存のレポートに対するAPIコードの後方互換性が確保されます。

<br/>

### バニラPythonの例

<br/>
`tttc-turbo` APIをバニラPythonで呼び出す予定がある場合、このコードスニペットで始めることができ、そのまま動作するはずです。
<br/>
<br/>

```python
import os
import requests
from rich import print

base_url = "https://tttc-turbo.web.app/api"
headers = {
    "Authorization": f"Bearer {os.environ.get('TTTC_TURBO_TOKEN', '<token>')}"
}

get = lambda url: requests.get(f"{base_url}{url}", headers=headers).json()

# dataset = get("/dataset/taiwan-zh")

ae = get("/dataset/taiwan-zh/node/argument_extraction_1")["data"]

if ae["compute_type"] != "argument_extraction_v0":
    raise Exception("compute_type is not argument_extraction_v0")

print(ae["output"])

# 出力:
#
# {
#     '1': {
#         'id': '1',
#         'comment': '那麼亞洲國家的現況呢？以新加坡或日本這兩個已開發的國家來說，是否有進行相關政策？',
#         'claims': [
#             {
#                 'claim': '亞洲已開發國家在同性婚姻政策上的進展較緩慢',
#                 'quote': '那麼亞洲國家的現況呢？以新加坡或日本這兩個已開發的國家來說，是否有進行相關政策？',
#                 'topicName': '同性婚姻法',
#                 'subtopicName': '法律與政策'
#             }
#         ]
#     },

print(ae["prompt"])

# 出力:
#
# 我將給你一段關於同性婚姻的視頻訪談文字記錄，以及一份提取出來的主題及子主題列表。
#
# 我希望你能從中提取出一份簡潔的訪談者可能做出的...

```

<br/>
<br/>
<br/>


### Swagger Pythonクライアント

<br/>

Talk to the City TurboはRPCライクなPythonライブラリも提供しています。
現在、Github Action [ダウンロード](https://github.com/AIObjectives/tttc-turbo/actions)アーティファクトとして見つけることができます。
<br/>
<br/>


```python
import os
import swagger_client
from rich import print

configuration = swagger_client.Configuration()
configuration.host = "http://localhost:5173"

api_client = swagger_client.ApiClient(configuration)
api_client.default_headers[
    "Authorization"
] = f"Bearer {os.environ.get('TTTC_TURBO_TOKEN', '<token>')}"

api_instance = swagger_client.DefaultApi(api_client)

# 生のグラフデータ、これは他の可視化目的でグラフを自分でレンダリングする場合にのみ有用です
dataset = api_instance.get_dataset("taiwan-zh")

# または特定のノードをリクエスト
ae = api_instance.get_node("taiwan-zh", "argument_extraction_1")["data"]

if ae["compute_type"] != "argument_extraction_v0":
    raise Exception("compute_type is not argument_extraction_v0")

print(ae["output"])

# 出力:
#
# {
#     '1': {
#         'id': '1',
#         'comment': '那麼亞洲國家的現況呢？以新加坡或日本這兩個已開發的國家來說，是否有進行相關政策？',
#         'claims': [
#             {
#                 'claim': '亞洲已開發國家在同性婚姻政策上的進展較緩慢',
#                 'quote': '那麼亞洲國家的現況呢？以新加坡或日本這兩個已開發的國家來說，是否有進行相關政策？',
#                 'topicName': '同性婚姻法',
#                 'subtopicName': '法律與政策'
#             }
#         ]
#     },

print(ae["prompt"])

# 出力:
#
# 我將給你一段關於同性婚姻的視頻訪談文字記錄，以及一份提取出來的主題及子主題列表。
#
# 我希望你能從中提取出一份簡潔的訪談者可能做出的...


```